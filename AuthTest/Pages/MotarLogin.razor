@page "/"
@inject NavigationManager NavManager
@using AuthTest.Models
@using Serilog

<h1><a href="@MotarApi">Click for Motar Login</a></h1>

<p>This is a test page for the QVX desktop app</p>

<div class="form-group-sm">
    <label class="control-label">Profile</label>
    <textarea rows="4" value="@resprofile" @onchange="@((args) => login.user = args.Value.ToString())" class="form-control"></textarea>
</div>
<h3>
    The is a demonstration of Single Sign On from Motar using Quantum APIs. <br />
    First the user logs in at Motar and a code is returned.  <br />
    The code is sent to the Quantum API which sends it to Motar with client secrets. <br />
    The response is a bearer token which is used to request the profile of the user from Motar.
</h3>
 


@*<button type="button" onclick="@MotarAuth()">Get Token</button>*@

@code {

    private Models.Login model = new Models.Login();
    private string MotarApi = "https://sandbox.motar.io/oauth/signin?response_type=code" +
        "&client_id=iok-cid-1f4b249e90ac6cae2ce6a01480e27241db659767d1e99de5" +
        "&redirect_uri=https://qvxauth.azurewebsites.net&state=NONCE";

    private string vxapi = "https://dev-api.quantuminterface.com/v1/auth/motar-code/";

    private string myprofile = "https://sandbox.motar.io/user/v1/my/profile";

    Login login = new Login();

    private string motarres = "empty";
    private string resprofile = "No Auth Yet";

    WebClient client = new WebClient();

    protected override async Task OnInitializedAsync()
    {

        SettingsGlobal.code = "wait";
        login.vxres = "init";

        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        Console.WriteLine($"Console- Initialize");

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("code", out var motarcode))
        {

            motarres = motarcode.ToString();

            //Console.WriteLine($"The response is {motarres}");

            if (motarres != "empty")
            {
                await CodeForToken();

                await MyProfile();

                Console.WriteLine($"Token from VxApi is {login.vxres}");
                Log.Information($"///Token from VxApi is {login.vxres}");
            }


            //Next step is to wrap this token with a Quantum Token and then you can 
            //query both clouds.

        }
    }

    protected void MotarAuth(EventArgs args)
    {

    }

    protected async Task CodeForToken()
    {
        JObject json = new JObject();
        json.Add("code", motarres);

        JObject r = await client.sendPost(vxapi, JsonConvert.SerializeObject(json));

        if (r.ContainsKey("access_token"))
        {
            SettingsGlobal.code = login.vxres;
            Log.Information("///Token Success");
            login.vxres = r["access_token"].Value<string>();
        }
    }

    protected async Task MyProfile()
    {
        try
        {
            JObject json = JObject.Parse(await client.getData(myprofile, login.vxres));
            login.myprofile = JsonConvert.SerializeObject(json);

            login.user = json["handle"].Value<string>();
            login.FirstName = json["firstName"].Value<string>();
            login.LastName = json["lastName"].Value<string>();
            login.Country = json["country"].Value<string>();

            resprofile = $" Handle = {login.user} \r\n Name = {login.FirstName} {login.LastName} \r\n Country = {login.Country}";
        }
        catch(Exception ex)
        {
            Log.Information($"Parsing my profile exc: {ex.Message}");
        }


    }


}
